/* eslint-disable */
/**
 * This file was automatically generated by cartesapp.template_generator.
 * DO NOT MODIFY IT BY HAND. Instead, run the generator,
 */
import { ethers, Signer, ContractReceipt } from "ethers";

import { 
    advanceInput, inspect, 
    AdvanceOutput, InspectOptions, AdvanceInputOptions, GraphqlOptions,
    EtherDepositOptions, ERC20DepositOptions, ERC721DepositOptions,
    Report as CartesiReport, Notice as CartesiNotice, Voucher as CartesiVoucher, 
    advanceDAppRelay, advanceERC20Deposit, advanceERC721Deposit, advanceEtherDeposit,
    queryNotice, queryReport, queryVoucher
} from "cartesi-client";


import Ajv from "ajv"
import addFormats from "ajv-formats"

import { 
    genericAdvanceInput, genericInspect, IOType, Models,
    IOData, Output, Event, ContractCall, InspectReport, 
    MutationOptions, QueryOptions, 
    CONVENTIONAL_TYPES, decodeToConventionalTypes
} from "../cartesapp/utils"

import { 
    genericGetOutputs, decodeAdvance
} from "../cartesapp/lib"

import * as indexerIfaces from "../indexer/ifaces"
import * as ifaces from "./ifaces";


/**
 * Configs
 */

const ajv = new Ajv();
addFormats(ajv);
ajv.addFormat("biginteger", (data) => {
    const dataTovalidate = data.startsWith('-') ? data.substring(1) : data;
    return ethers.utils.isHexString(dataTovalidate) && dataTovalidate.length % 2 == 0;
});
const MAX_SPLITTABLE_OUTPUT_SIZE = 4194247;

/*
 * Mutations/Advances
 */

export async function achievementsReplay(
    client:Signer,
    dappAddress:string,
    inputData: ifaces.ReplayAchievements,
    options?:MutationOptions
):Promise<AdvanceOutput|ContractReceipt|any[]> {
    const data: ReplayAchievements = new ReplayAchievements(inputData);
    if (options?.decode) { options.sync = true; }
    const result = await genericAdvanceInput<ifaces.ReplayAchievements>(client,dappAddress,'0xbaacf812',data, options)
    if (options?.decode) {
        return decodeAdvance(result as AdvanceOutput,decodeToModel,options);
    }
    return result;
}

export async function createAchievement(
    client:Signer,
    dappAddress:string,
    inputData: ifaces.CreateAchievementsPayload,
    options?:MutationOptions
):Promise<AdvanceOutput|ContractReceipt|any[]> {
    const data: CreateAchievementsPayload = new CreateAchievementsPayload(inputData);
    if (options?.decode) { options.sync = true; }
    const result = await genericAdvanceInput<ifaces.CreateAchievementsPayload>(client,dappAddress,'0x3e0e5ffa',data, options)
    if (options?.decode) {
        return decodeAdvance(result as AdvanceOutput,decodeToModel,options);
    }
    return result;
}

export async function collectMoment(
    client:Signer,
    dappAddress:string,
    inputData: ifaces.CollectMomentPayload,
    options?:MutationOptions
):Promise<AdvanceOutput|ContractReceipt|any[]> {
    const data: CollectMomentPayload = new CollectMomentPayload(inputData);
    if (options?.decode) { options.sync = true; }
    const result = await genericAdvanceInput<ifaces.CollectMomentPayload>(client,dappAddress,'0x3f4825e7',data, options)
    if (options?.decode) {
        return decodeAdvance(result as AdvanceOutput,decodeToModel,options);
    }
    return result;
}

export async function releaseMoment(
    client:Signer,
    dappAddress:string,
    inputData: ifaces.ReleaseMomentPayload,
    options?:MutationOptions
):Promise<AdvanceOutput|ContractReceipt|any[]> {
    const data: ReleaseMomentPayload = new ReleaseMomentPayload(inputData);
    if (options?.decode) { options.sync = true; }
    const result = await genericAdvanceInput<ifaces.ReleaseMomentPayload>(client,dappAddress,'0xa30ac8ae',data, options)
    if (options?.decode) {
        return decodeAdvance(result as AdvanceOutput,decodeToModel,options);
    }
    return result;
}


/*
 * Queries/Inspects
 */

export async function achievements(
    inputData: ifaces.AchievementsPayload,
    options?:QueryOptions
):Promise<InspectReport|any> {
    const route = 'achievements/achievements';
    const data: AchievementsPayload = new AchievementsPayload(inputData);
    const output: InspectReport = await genericInspect<ifaces.AchievementsPayload>(data,route,options);
    if (options?.decode) { return decodeToModel(output,options.decodeModel || "json"); }
    return output;
}

export async function achievementInfo(
    inputData: ifaces.AchievementPayload,
    options?:QueryOptions
):Promise<InspectReport|any> {
    const route = 'achievements/achievement_info';
    const data: AchievementPayload = new AchievementPayload(inputData);
    const output: InspectReport = await genericInspect<ifaces.AchievementPayload>(data,route,options);
    if (options?.decode) { return decodeToModel(output,options.decodeModel || "json"); }
    return output;
}

export async function moments(
    inputData: ifaces.MomentsPayload,
    options?:QueryOptions
):Promise<InspectReport|any> {
    const route = 'achievements/moments';
    const data: MomentsPayload = new MomentsPayload(inputData);
    const output: InspectReport = await genericInspect<ifaces.MomentsPayload>(data,route,options);
    if (options?.decode) { return decodeToModel(output,options.decodeModel || "json"); }
    return output;
}

export async function collectValue(
    inputData: ifaces.CollectValuePayload,
    options?:QueryOptions
):Promise<InspectReport|any> {
    const route = 'achievements/collect_value';
    const data: CollectValuePayload = new CollectValuePayload(inputData);
    const output: InspectReport = await genericInspect<ifaces.CollectValuePayload>(data,route,options);
    if (options?.decode) { return decodeToModel(output,options.decodeModel || "json"); }
    return output;
}

export async function gameplays(
    inputData: ifaces.GameplaysPayload,
    options?:QueryOptions
):Promise<InspectReport|any> {
    const route = 'achievements/gameplays';
    const data: GameplaysPayload = new GameplaysPayload(inputData);
    const output: InspectReport = await genericInspect<ifaces.GameplaysPayload>(data,route,options);
    if (options?.decode) { return decodeToModel(output,options.decodeModel || "json"); }
    return output;
}

export async function gameplayInfo(
    inputData: ifaces.GameplayPayload,
    options?:QueryOptions
):Promise<InspectReport|any> {
    const route = 'achievements/gameplay_info';
    const data: GameplayPayload = new GameplayPayload(inputData);
    const output: InspectReport = await genericInspect<ifaces.GameplayPayload>(data,route,options);
    if (options?.decode) { return decodeToModel(output,options.decodeModel || "json"); }
    return output;
}


/*
 * Indexer Query
 */

export async function getOutputs(
    inputData: indexerIfaces.IndexerPayload,
    options?:InspectOptions
):Promise<any[]> {
    return genericGetOutputs(inputData,decodeToModel,options);
}


/**
 * Models Decoders/Exporters
 */

export function decodeToModel(data: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport, modelName: string): any {
    if (modelName == undefined)
        throw new Error("undefined model");
    if (CONVENTIONAL_TYPES.includes(modelName))
        return decodeToConventionalTypes(data.payload,modelName);
    const decoder = models[modelName].decoder;
    if (decoder == undefined)
        throw new Error("undefined decoder");
    return decoder(data);
}

export function exportToModel(data: any, modelName: string): string {
    const exporter = models[modelName].exporter;
    if (exporter == undefined)
        throw new Error("undefined exporter");
    return exporter(data);
}

export class CreateAchievementsPayload extends IOData<ifaces.CreateAchievementsPayload> { constructor(data: ifaces.CreateAchievementsPayload, validate: boolean = true) { super(models['CreateAchievementsPayload'],data,validate); } }
export function exportToCreateAchievementsPayload(data: ifaces.CreateAchievementsPayload): string {
    const dataToExport: CreateAchievementsPayload = new CreateAchievementsPayload(data);
    return dataToExport.export();
}

export class ReleaseMomentPayload extends IOData<ifaces.ReleaseMomentPayload> { constructor(data: ifaces.ReleaseMomentPayload, validate: boolean = true) { super(models['ReleaseMomentPayload'],data,validate); } }
export function exportToReleaseMomentPayload(data: ifaces.ReleaseMomentPayload): string {
    const dataToExport: ReleaseMomentPayload = new ReleaseMomentPayload(data);
    return dataToExport.export();
}

export class CollectMomentPayload extends IOData<ifaces.CollectMomentPayload> { constructor(data: ifaces.CollectMomentPayload, validate: boolean = true) { super(models['CollectMomentPayload'],data,validate); } }
export function exportToCollectMomentPayload(data: ifaces.CollectMomentPayload): string {
    const dataToExport: CollectMomentPayload = new CollectMomentPayload(data);
    return dataToExport.export();
}

export class ReplayAchievements extends IOData<ifaces.ReplayAchievements> { constructor(data: ifaces.ReplayAchievements, validate: boolean = true) { super(models['ReplayAchievements'],data,validate); } }
export function exportToReplayAchievements(data: ifaces.ReplayAchievements): string {
    const dataToExport: ReplayAchievements = new ReplayAchievements(data);
    return dataToExport.export();
}

export class CollectValuePayload extends IOData<ifaces.CollectValuePayload> { constructor(data: ifaces.CollectValuePayload, validate: boolean = true) { super(models['CollectValuePayload'],data,validate); } }
export function exportToCollectValuePayload(data: ifaces.CollectValuePayload): string {
    const dataToExport: CollectValuePayload = new CollectValuePayload(data);
    return dataToExport.export();
}

export class GameplayPayload extends IOData<ifaces.GameplayPayload> { constructor(data: ifaces.GameplayPayload, validate: boolean = true) { super(models['GameplayPayload'],data,validate); } }
export function exportToGameplayPayload(data: ifaces.GameplayPayload): string {
    const dataToExport: GameplayPayload = new GameplayPayload(data);
    return dataToExport.export();
}

export class GameplaysPayload extends IOData<ifaces.GameplaysPayload> { constructor(data: ifaces.GameplaysPayload, validate: boolean = true) { super(models['GameplaysPayload'],data,validate); } }
export function exportToGameplaysPayload(data: ifaces.GameplaysPayload): string {
    const dataToExport: GameplaysPayload = new GameplaysPayload(data);
    return dataToExport.export();
}

export class AchievementsPayload extends IOData<ifaces.AchievementsPayload> { constructor(data: ifaces.AchievementsPayload, validate: boolean = true) { super(models['AchievementsPayload'],data,validate); } }
export function exportToAchievementsPayload(data: ifaces.AchievementsPayload): string {
    const dataToExport: AchievementsPayload = new AchievementsPayload(data);
    return dataToExport.export();
}

export class AchievementPayload extends IOData<ifaces.AchievementPayload> { constructor(data: ifaces.AchievementPayload, validate: boolean = true) { super(models['AchievementPayload'],data,validate); } }
export function exportToAchievementPayload(data: ifaces.AchievementPayload): string {
    const dataToExport: AchievementPayload = new AchievementPayload(data);
    return dataToExport.export();
}

export class MomentsPayload extends IOData<ifaces.MomentsPayload> { constructor(data: ifaces.MomentsPayload, validate: boolean = true) { super(models['MomentsPayload'],data,validate); } }
export function exportToMomentsPayload(data: ifaces.MomentsPayload): string {
    const dataToExport: MomentsPayload = new MomentsPayload(data);
    return dataToExport.export();
}

export class AchievementInfo extends Output<ifaces.AchievementInfo> { constructor(output: CartesiReport | InspectReport) { super(models['AchievementInfo'],output); } }
export function decodeToAchievementInfo(output: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport): AchievementInfo {
    return new AchievementInfo(output as CartesiReport);
}

export class AchievementsOutput extends Output<ifaces.AchievementsOutput> { constructor(output: CartesiReport | InspectReport) { super(models['AchievementsOutput'],output); } }
export function decodeToAchievementsOutput(output: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport): AchievementsOutput {
    return new AchievementsOutput(output as CartesiReport);
}

export class MomentInfo extends Output<ifaces.MomentInfo> { constructor(output: CartesiReport | InspectReport) { super(models['MomentInfo'],output); } }
export function decodeToMomentInfo(output: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport): MomentInfo {
    return new MomentInfo(output as CartesiReport);
}

export class MomentsOutput extends Output<ifaces.MomentsOutput> { constructor(output: CartesiReport | InspectReport) { super(models['MomentsOutput'],output); } }
export function decodeToMomentsOutput(output: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport): MomentsOutput {
    return new MomentsOutput(output as CartesiReport);
}

export class MomentValues extends Output<ifaces.MomentValues> { constructor(output: CartesiReport | InspectReport) { super(models['MomentValues'],output); } }
export function decodeToMomentValues(output: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport): MomentValues {
    return new MomentValues(output as CartesiReport);
}

export class GameplayInfo extends Output<ifaces.GameplayInfo> { constructor(output: CartesiReport | InspectReport) { super(models['GameplayInfo'],output); } }
export function decodeToGameplayInfo(output: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport): GameplayInfo {
    return new GameplayInfo(output as CartesiReport);
}

export class GameplaysOutput extends Output<ifaces.GameplaysOutput> { constructor(output: CartesiReport | InspectReport) { super(models['GameplaysOutput'],output); } }
export function decodeToGameplaysOutput(output: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport): GameplaysOutput {
    return new GameplaysOutput(output as CartesiReport);
}

export class AcquiredAchievement extends Event<ifaces.AcquiredAchievement> { constructor(output: CartesiNotice) { super(models['AcquiredAchievement'],output); } }
export function decodeToAcquiredAchievement(output: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport): AcquiredAchievement {
    return new AcquiredAchievement(output as CartesiNotice);
}

export class CollectedMoment extends Event<ifaces.CollectedMoment> { constructor(output: CartesiNotice) { super(models['CollectedMoment'],output); } }
export function decodeToCollectedMoment(output: CartesiReport | CartesiNotice | CartesiVoucher | InspectReport): CollectedMoment {
    return new CollectedMoment(output as CartesiNotice);
}


/**
 * Model
 */

export const models: Models = {
    'CreateAchievementsPayload': {
        ioType:IOType.mutationPayload,
        abiTypes:['bytes32', 'string', 'string', 'string', 'bytes', 'bytes32', 'string', 'bytes', 'bytes'],
        params:['cartridge_id', 'name', 'description', 'expression', 'icon', 'outcard_hash', 'args', 'in_card', 'log'],
        exporter: exportToCreateAchievementsPayload,
        validator: ajv.compile<ifaces.CreateAchievementsPayload>(JSON.parse('{"title": "CreateAchievementsPayload", "type": "object", "properties": {"cartridge_id": {"type": "string", "format": "binary"}, "name": {"type": "string"}, "description": {"type": "string"}, "expression": {"type": "string"}, "icon": {"type": "string", "format": "binary"}, "outcard_hash": {"type": "string", "format": "binary"}, "args": {"type": "string"}, "in_card": {"type": "string", "format": "binary"}, "log": {"type": "string", "format": "binary"}}, "required": ["cartridge_id", "name", "description", "expression", "icon", "outcard_hash", "args", "in_card", "log"]}'))
    },
    'ReleaseMomentPayload': {
        ioType:IOType.mutationPayload,
        abiTypes:['uint'],
        params:['id'],
        exporter: exportToReleaseMomentPayload,
        validator: ajv.compile<ifaces.ReleaseMomentPayload>(JSON.parse('{"title": "ReleaseMomentPayload", "type": "object", "properties": {"id": {"type": "integer"}}, "required": ["id"]}'))
    },
    'CollectMomentPayload': {
        ioType:IOType.mutationPayload,
        abiTypes:['bytes32', 'bytes32', 'string', 'bytes', 'bytes', 'uint', 'uint'],
        params:['gameplay_id', 'outcard_hash', 'args', 'in_card', 'log', 'frame', 'user_achievement'],
        exporter: exportToCollectMomentPayload,
        validator: ajv.compile<ifaces.CollectMomentPayload>(JSON.parse('{"title": "CollectMomentPayload", "type": "object", "properties": {"gameplay_id": {"type": "string", "format": "binary"}, "outcard_hash": {"type": "string", "format": "binary"}, "args": {"type": "string"}, "in_card": {"type": "string", "format": "binary"}, "log": {"type": "string", "format": "binary"}, "frame": {"type": "integer"}, "user_achievement": {"type": "integer"}}, "required": ["gameplay_id", "outcard_hash", "args", "in_card", "log", "frame", "user_achievement"]}'))
    },
    'ReplayAchievements': {
        ioType:IOType.mutationPayload,
        abiTypes:['bytes32', 'bytes32', 'string', 'bytes', 'bytes', 'bytes32[]'],
        params:['cartridge_id', 'outcard_hash', 'args', 'in_card', 'log', 'achievements'],
        exporter: exportToReplayAchievements,
        validator: ajv.compile<ifaces.ReplayAchievements>(JSON.parse('{"title": "ReplayAchievements", "type": "object", "properties": {"cartridge_id": {"type": "string", "format": "binary"}, "outcard_hash": {"type": "string", "format": "binary"}, "args": {"type": "string"}, "in_card": {"type": "string", "format": "binary"}, "log": {"type": "string", "format": "binary"}, "achievements": {"type": "array", "items": {"type": "string", "format": "binary"}}}, "required": ["cartridge_id", "outcard_hash", "args", "in_card", "log", "achievements"]}'))
    },
    'CollectValuePayload': {
        ioType:IOType.queryPayload,
        abiTypes:[],
        params:['id'],
        exporter: exportToCollectValuePayload,
        validator: ajv.compile<ifaces.CollectValuePayload>(JSON.parse('{"title": "CollectValuePayload", "type": "object", "properties": {"id": {"type": "integer"}}, "required": ["id"]}'))
    },
    'GameplayPayload': {
        ioType:IOType.queryPayload,
        abiTypes:[],
        params:['id'],
        exporter: exportToGameplayPayload,
        validator: ajv.compile<ifaces.GameplayPayload>(JSON.parse('{"title": "GameplayPayload", "type": "object", "properties": {"id": {"type": "string"}}, "required": ["id"]}'))
    },
    'GameplaysPayload': {
        ioType:IOType.queryPayload,
        abiTypes:[],
        params:['cartridge_id', 'user_address', 'order_by', 'order_dir', 'page', 'page_size'],
        exporter: exportToGameplaysPayload,
        validator: ajv.compile<ifaces.GameplaysPayload>(JSON.parse('{"title": "GameplaysPayload", "type": "object", "properties": {"cartridge_id": {"type": "string"}, "user_address": {"type": "string"}, "order_by": {"type": "string"}, "order_dir": {"type": "string"}, "page": {"type": "integer"}, "page_size": {"type": "integer"}}}'))
    },
    'AchievementsPayload': {
        ioType:IOType.queryPayload,
        abiTypes:[],
        params:['cartridge_id', 'user_address', 'name', 'order_by', 'order_dir', 'page', 'page_size', 'player'],
        exporter: exportToAchievementsPayload,
        validator: ajv.compile<ifaces.AchievementsPayload>(JSON.parse('{"title": "AchievementsPayload", "type": "object", "properties": {"cartridge_id": {"type": "string"}, "user_address": {"type": "string"}, "name": {"type": "string"}, "order_by": {"type": "string"}, "order_dir": {"type": "string"}, "page": {"type": "integer"}, "page_size": {"type": "integer"}, "player": {"type": "string"}}}'))
    },
    'AchievementPayload': {
        ioType:IOType.queryPayload,
        abiTypes:[],
        params:['id'],
        exporter: exportToAchievementPayload,
        validator: ajv.compile<ifaces.AchievementPayload>(JSON.parse('{"title": "AchievementPayload", "type": "object", "properties": {"id": {"type": "string"}}, "required": ["id"]}'))
    },
    'MomentsPayload': {
        ioType:IOType.queryPayload,
        abiTypes:[],
        params:['cartridge_id', 'gameplay_id', 'user_address', 'order_by', 'order_dir', 'page', 'page_size'],
        exporter: exportToMomentsPayload,
        validator: ajv.compile<ifaces.MomentsPayload>(JSON.parse('{"title": "MomentsPayload", "type": "object", "properties": {"cartridge_id": {"type": "string"}, "gameplay_id": {"type": "string"}, "user_address": {"type": "string"}, "order_by": {"type": "string"}, "order_dir": {"type": "string"}, "page": {"type": "integer"}, "page_size": {"type": "integer"}}}'))
    },
    'AchievementInfo': {
        ioType:IOType.report,
        abiTypes:[],
        params:['id', 'name', 'description', 'expression', 'cartridge_id', 'created_by', 'created_at', 'icon', 'users', 'player_achieved', 'total_cartridge_players', 'total_players_achieved'],
        decoder: decodeToAchievementInfo,
        validator: ajv.compile<ifaces.AchievementInfo>(JSON.parse('{"title": "AchievementInfo", "type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "expression": {"type": "string"}, "cartridge_id": {"type": "string"}, "created_by": {"type": "string"}, "created_at": {"type": "integer"}, "icon": {"type": "string"}, "users": {"type": "array", "items": {"$ref": "#/definitions/UserAchievementInfo"}}, "player_achieved": {"type": "boolean"}, "total_cartridge_players": {"type": "integer"}, "total_players_achieved": {"type": "integer"}}, "required": ["id", "name", "description", "expression", "cartridge_id", "created_by", "created_at", "total_cartridge_players", "total_players_achieved"], "definitions": {"UserAchievementInfo": {"title": "UserAchievementInfo", "type": "object", "properties": {"id": {"type": "integer"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "gameplay_id": {"type": "string"}, "achievement_id": {"type": "string"}, "achievement_name": {"type": "string"}, "achievement_description": {"type": "string"}, "achievement_icon": {"type": "string"}, "number_collected_moments": {"type": "integer"}}, "required": ["id", "user_address", "timestamp", "frame", "index"]}}}'))
    },
    'AchievementsOutput': {
        ioType:IOType.report,
        abiTypes:[],
        params:['data', 'total', 'page'],
        decoder: decodeToAchievementsOutput,
        validator: ajv.compile<ifaces.AchievementsOutput>(JSON.parse('{"title": "AchievementsOutput", "type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/definitions/AchievementInfo"}}, "total": {"type": "integer"}, "page": {"type": "integer"}}, "required": ["data", "total", "page"], "definitions": {"UserAchievementInfo": {"title": "UserAchievementInfo", "type": "object", "properties": {"id": {"type": "integer"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "gameplay_id": {"type": "string"}, "achievement_id": {"type": "string"}, "achievement_name": {"type": "string"}, "achievement_description": {"type": "string"}, "achievement_icon": {"type": "string"}, "number_collected_moments": {"type": "integer"}}, "required": ["id", "user_address", "timestamp", "frame", "index"]}, "AchievementInfo": {"title": "AchievementInfo", "type": "object", "properties": {"id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "expression": {"type": "string"}, "cartridge_id": {"type": "string"}, "created_by": {"type": "string"}, "created_at": {"type": "integer"}, "icon": {"type": "string"}, "users": {"type": "array", "items": {"$ref": "#/definitions/UserAchievementInfo"}}, "player_achieved": {"type": "boolean"}, "total_cartridge_players": {"type": "integer"}, "total_players_achieved": {"type": "integer"}}, "required": ["id", "name", "description", "expression", "cartridge_id", "created_by", "created_at", "total_cartridge_players", "total_players_achieved"]}}}'))
    },
    'MomentInfo': {
        ioType:IOType.report,
        abiTypes:[],
        params:['id', 'user_address', 'timestamp', 'frame', 'index', 'shares', 'cartridge_id', 'gameplay_id', 'value'],
        decoder: decodeToMomentInfo,
        validator: ajv.compile<ifaces.MomentInfo>(JSON.parse('{"title": "MomentInfo", "type": "object", "properties": {"id": {"type": "string"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "shares": {"type": "integer"}, "cartridge_id": {"type": "string"}, "gameplay_id": {"type": "string"}, "value": {"type": "integer"}}, "required": ["id", "user_address", "timestamp", "frame", "index", "shares"]}'))
    },
    'MomentsOutput': {
        ioType:IOType.report,
        abiTypes:[],
        params:['data', 'total', 'page'],
        decoder: decodeToMomentsOutput,
        validator: ajv.compile<ifaces.MomentsOutput>(JSON.parse('{"title": "MomentsOutput", "type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/definitions/MomentInfo"}}, "total": {"type": "integer"}, "page": {"type": "integer"}}, "required": ["data", "total", "page"], "definitions": {"MomentInfo": {"title": "MomentInfo", "type": "object", "properties": {"id": {"type": "string"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "shares": {"type": "integer"}, "cartridge_id": {"type": "string"}, "gameplay_id": {"type": "string"}, "value": {"type": "integer"}}, "required": ["id", "user_address", "timestamp", "frame", "index", "shares"]}}}'))
    },
    'MomentValues': {
        ioType:IOType.report,
        abiTypes:[],
        params:['total_moments', 'total_shares', 'buy_base_value', 'sell_base_value', 'buy_fee', 'sell_fee', 'shares_to_buy', 'share_value_after_buy', 'share_value_after_sell', 'buy_in_fee', 'collectors_pool_fee', 'developer_fee', 'player_fee'],
        decoder: decodeToMomentValues,
        validator: ajv.compile<ifaces.MomentValues>(JSON.parse('{"title": "MomentValues", "type": "object", "properties": {"total_moments": {"type": "integer"}, "total_shares": {"type": "integer"}, "buy_base_value": {"type": "integer"}, "sell_base_value": {"type": "integer"}, "buy_fee": {"type": "integer"}, "sell_fee": {"type": "integer"}, "shares_to_buy": {"type": "integer"}, "share_value_after_buy": {"type": "integer"}, "share_value_after_sell": {"type": "integer"}, "buy_in_fee": {"type": "integer"}, "collectors_pool_fee": {"type": "integer"}, "developer_fee": {"type": "integer"}, "player_fee": {"type": "integer"}}, "required": ["total_moments", "total_shares", "buy_base_value", "sell_base_value", "buy_fee", "sell_fee", "shares_to_buy", "share_value_after_buy", "share_value_after_sell", "buy_in_fee", "collectors_pool_fee", "developer_fee", "player_fee"]}'))
    },
    'GameplayInfo': {
        ioType:IOType.report,
        abiTypes:[],
        params:['id', 'cartridge_id', 'user_address', 'timestamp', 'share_value', 'total_shares', 'achievements', 'moments'],
        decoder: decodeToGameplayInfo,
        validator: ajv.compile<ifaces.GameplayInfo>(JSON.parse('{"title": "GameplayInfo", "type": "object", "properties": {"id": {"type": "string"}, "cartridge_id": {"type": "string"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "share_value": {"type": "integer"}, "total_shares": {"type": "integer"}, "achievements": {"type": "array", "items": {"$ref": "#/definitions/UserAchievementInfo"}}, "moments": {"type": "array", "items": {"$ref": "#/definitions/MomentInfo"}}}, "required": ["id", "cartridge_id", "user_address", "timestamp", "share_value"], "definitions": {"UserAchievementInfo": {"title": "UserAchievementInfo", "type": "object", "properties": {"id": {"type": "integer"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "gameplay_id": {"type": "string"}, "achievement_id": {"type": "string"}, "achievement_name": {"type": "string"}, "achievement_description": {"type": "string"}, "achievement_icon": {"type": "string"}, "number_collected_moments": {"type": "integer"}}, "required": ["id", "user_address", "timestamp", "frame", "index"]}, "MomentInfo": {"title": "MomentInfo", "type": "object", "properties": {"id": {"type": "string"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "shares": {"type": "integer"}, "cartridge_id": {"type": "string"}, "gameplay_id": {"type": "string"}, "value": {"type": "integer"}}, "required": ["id", "user_address", "timestamp", "frame", "index", "shares"]}}}'))
    },
    'GameplaysOutput': {
        ioType:IOType.report,
        abiTypes:[],
        params:['data', 'total', 'page'],
        decoder: decodeToGameplaysOutput,
        validator: ajv.compile<ifaces.GameplaysOutput>(JSON.parse('{"title": "GameplaysOutput", "type": "object", "properties": {"data": {"type": "array", "items": {"$ref": "#/definitions/GameplayInfo"}}, "total": {"type": "integer"}, "page": {"type": "integer"}}, "required": ["data", "total", "page"], "definitions": {"UserAchievementInfo": {"title": "UserAchievementInfo", "type": "object", "properties": {"id": {"type": "integer"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "gameplay_id": {"type": "string"}, "achievement_id": {"type": "string"}, "achievement_name": {"type": "string"}, "achievement_description": {"type": "string"}, "achievement_icon": {"type": "string"}, "number_collected_moments": {"type": "integer"}}, "required": ["id", "user_address", "timestamp", "frame", "index"]}, "MomentInfo": {"title": "MomentInfo", "type": "object", "properties": {"id": {"type": "string"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "shares": {"type": "integer"}, "cartridge_id": {"type": "string"}, "gameplay_id": {"type": "string"}, "value": {"type": "integer"}}, "required": ["id", "user_address", "timestamp", "frame", "index", "shares"]}, "GameplayInfo": {"title": "GameplayInfo", "type": "object", "properties": {"id": {"type": "string"}, "cartridge_id": {"type": "string"}, "user_address": {"type": "string"}, "timestamp": {"type": "integer"}, "share_value": {"type": "integer"}, "total_shares": {"type": "integer"}, "achievements": {"type": "array", "items": {"$ref": "#/definitions/UserAchievementInfo"}}, "moments": {"type": "array", "items": {"$ref": "#/definitions/MomentInfo"}}}, "required": ["id", "cartridge_id", "user_address", "timestamp", "share_value"]}}}'))
    },
    'AcquiredAchievement': {
        ioType:IOType.notice,
        abiTypes:['bytes32', 'address', 'bytes32', 'bytes32', 'uint', 'uint', 'uint', 'string'],
        params:['cartridge_id', 'user_address', 'achievement_id', 'gameplay_id', 'timestamp', 'frame', 'index', 'cid'],
        decoder: decodeToAcquiredAchievement,
        validator: ajv.compile<ifaces.AcquiredAchievement>(JSON.parse('{"title": "AcquiredAchievement", "type": "object", "properties": {"cartridge_id": {"type": "string", "format": "binary"}, "user_address": {"type": "string"}, "achievement_id": {"type": "string", "format": "binary"}, "gameplay_id": {"type": "string", "format": "binary"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "cid": {"default": "", "type": "string"}}, "required": ["cartridge_id", "user_address", "achievement_id", "gameplay_id", "timestamp", "frame", "index"]}'.replaceAll('integer','string","format":"biginteger')))
    },
    'CollectedMoment': {
        ioType:IOType.notice,
        abiTypes:['bytes32', 'address', 'bytes32', 'uint', 'uint', 'uint', 'string'],
        params:['cartridge_id', 'user_address', 'gameplay_id', 'timestamp', 'frame', 'index', 'cid'],
        decoder: decodeToCollectedMoment,
        validator: ajv.compile<ifaces.CollectedMoment>(JSON.parse('{"title": "CollectedMoment", "type": "object", "properties": {"cartridge_id": {"type": "string", "format": "binary"}, "user_address": {"type": "string"}, "gameplay_id": {"type": "string", "format": "binary"}, "timestamp": {"type": "integer"}, "frame": {"type": "integer"}, "index": {"type": "integer"}, "cid": {"default": "", "type": "string"}}, "required": ["cartridge_id", "user_address", "gameplay_id", "timestamp", "frame", "index"]}'.replaceAll('integer','string","format":"biginteger')))
    },
    };